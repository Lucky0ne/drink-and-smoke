#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('drink-and-smoke:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server;


checkDBfile()
    .then(function () {
        require("../db/db").openDatabase();
        server = http.createServer(app);
        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);

    })
    .catch(function (err) {
        debug(err);
        process.exit(1);
    });



/**
 * Check if db is exists
 */
function checkDBfile() {
    return new Promise(function (resolve, reject) {
        var path = require('path');
        var dbfile = path.join(path.resolve(__dirname, ".."), "drink-and-smoke.db");
        var dbtempl = path.join(path.resolve(__dirname, "../db"), "etalon.db");
        var fs = require('fs');
        fs.access(dbfile, fs.F_OK, function(err) {
            if (!err) {
                debug("Database file exists.");
                resolve();
            } else {
                debug("Database file not exists. Creating database from template...");
                fs.createReadStream(dbtempl)
                    .pipe(fs.createWriteStream(dbfile))
                    .on('finish', function () {
                        debug("Database is created.");
                        resolve();
                    })
                    .on("error", function () {
                        reject(new Error("Error of copying DB file."));
                    } );
            }
        });
    });
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
